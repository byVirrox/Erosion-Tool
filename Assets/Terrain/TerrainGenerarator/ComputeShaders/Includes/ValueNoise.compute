#ifndef VALUE_NOISE_INCLUDED
#define VALUE_NOISE_INCLUDED


float hash(int2 p)
{
    uint n = (p.x * 1664525u) + (p.y * 3284157443u);
    n = (n ^ (n >> 16)) * 1664525u;
    return float(n) / 4294967295.0;
}

/**
float2 hash(float2 p)
{
    // https://www.shadertoy.com/view/4djSRW
    p = float2(dot(p, float2(127.1, 311.7)),
               dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}
**/


// 2D Value Noise mit analytischen Ableitungen (portiert von Inigo Quilez)
float3 valueNoise_deriv(in float2 x)
{
    float2 p = floor(x);
    float2 f = frac(x);
    
    float2 u = f * f * f * (f * (f * 6.0 - 15.0) + 10.0);
    float2 du = 30.0 * f * f * (f * (f - 2.0) + 1.0);
    
    float a = hash(p + int2(0, 0));
    float b = hash(p + int2(1, 0));
    float c = hash(p + int2(0, 1));
    float d = hash(p + int2(1, 1));

    float val = a + (b - a) * u.x + (c - a) * u.y + (a - b - c + d) * u.x * u.y;
    float2 grad = du * (float2(b - a, c - a) + (a - b - c + d) * u.yx);
    
    return float3(val, grad);
}

#endif